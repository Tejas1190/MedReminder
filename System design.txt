Here’s a high-level system design for your MedReminder project, focusing on the main components, their interactions, and the technologies involved:
1. Architecture Overview
Type: Monolithic Django web application (with Celery for background tasks)
Frontend: Django templates (HTML, Bootstrap/Tailwind, JavaScript)
Backend: Django (Python), Celery (for async/background jobs)
Database: SQLite (local/dev), can be PostgreSQL (prod)
External Services: Google Maps API (geofencing), Twilio (SMS), WeasyPrint (PDF generation)
Hosting: Can be deployed on any server supporting Python/Django (e.g., Heroku, AWS, DigitalOcean)
2. Core Components
A. User Management
Custom User Model: Supports roles (patient, caregiver)
Authentication: Django’s built-in auth (login, registration, permissions)
B. Medication Management
Models: Medication, MedicationSchedule, MedicationIntakeLog
Features: Add/edit/delete medications, set schedules, log intakes, track missed doses
C. Appointments & Mood Tracking
Models: Appointment, MoodTracker
Features: CRUD for appointments, daily mood logging
D. Geofencing
Model: GeofenceZone
Frontend: Google Maps for zone visualization
Logic: JavaScript checks user’s live location; alerts if user leaves a zone
E. Notifications
Celery Tasks: Send reminders (print/SMS), check for missed doses
Twilio: For SMS fallback
Web Push (future): Can be added for browser/mobile notifications
F. Caregiver Dashboard
Role-based Views: Caregivers see patients, missed doses, can monitor compliance
G. Calendar & PDF Export
Calendar View: Shows daily medication/mood logs, highlights missed doses
PDF Export: Generates downloadable medication history
3. Frontend-Backend Interaction
Forms: Django forms for all CRUD operations
AJAX/JS: Used for geofencing (location monitoring), possibly for future real-time features
Templates: Rendered server-side, styled for accessibility and modern look
4. Background Processing
Celery: Handles scheduled reminders, missed dose checks, and can be extended for more background jobs
Broker: Redis or RabbitMQ (for Celery, in production)
5. Geofencing Flow
User defines geofence zones (name, lat, lng, radius) via web form.
Zones are visualized on Google Maps in the browser.
JavaScript runs in the browser:
Uses Geolocation API to get user’s position.
Compares to all stored geofences.
If user leaves all zones: Shows alert (can be extended to trigger backend event/SOS).
Zones can be deleted from the UI.
6. Notifications/Reminders Flow
Schedules are stored for each medication.
Celery periodic tasks check schedules and send reminders (print/SMS).
Missed doses are tracked and can trigger alerts to caregivers.
7. PDF Export Flow
User clicks “Download PDF” on the calendar page.
Backend renders HTML with intake logs.
WeasyPrint converts HTML to PDF and returns as download.
8. Security & Roles
Login required for all main features.
Role checks for caregiver dashboard.
CSRF protection on all forms.
9. Extensibility
API Layer: Can be added for mobile apps or third-party integrations (Django REST Framework).
Push Notifications: Can be added for real-time reminders.
SOS Alerts: Can be extended to notify caregivers or emergency contacts.